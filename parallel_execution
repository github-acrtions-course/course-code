import unittest
from unittest.mock import patch, MagicMock
from KubernetesClient import KubernetesClient

class TestKubernetesClient(unittest.TestCase):

    @patch('KubernetesClient.client.AppsV1Api')
    @patch('KubernetesClient.config.load_kube_config')
    def test_kube_client_apps_v1(self, mock_load_kube_config, mock_apps_v1_api):
        # Arrange
        mock_apps_v1 = MagicMock()
        mock_apps_v1_api.return_value = mock_apps_v1
        kube_client = KubernetesClient()

        # Act
        result = kube_client.kube_client_apps_v1()

        # Assert
        mock_load_kube_config.assert_called_once_with(kube_client.KUBE_CONFIG_LOCATION)
        mock_apps_v1_api.assert_called_once()
        self.assertEqual(result, mock_apps_v1)

    @patch('KubernetesClient.client.CoreV1Api')
    @patch('KubernetesClient.config.load_kube_config')
    def test_kube_client_core_v1(self, mock_load_kube_config, mock_core_v1_api):
        # Arrange
        mock_core_v1 = MagicMock()
        mock_core_v1_api.return_value = mock_core_v1
        kube_client = KubernetesClient()

        # Act
        result = kube_client.kube_client_core_v1()

        # Assert
        mock_load_kube_config.assert_called_once_with(kube_client.KUBE_CONFIG_LOCATION)
        mock_core_v1_api.assert_called_once()
        self.assertEqual(result, mock_core_v1)

    @patch('KubernetesClient.KubernetesClient.kube_client_apps_v1')
    def test_get_deployment_list(self, mock_kube_client_apps_v1):
        # Arrange
        mock_apps_v1 = MagicMock()
        mock_kube_client_apps_v1.return_value = mock_apps_v1
        mock_apps_v1.list_namespaced_deployment.return_value = 'mock_deployments'
        kube_client = KubernetesClient()

        # Act
        result = kube_client.get_deployment_list('default')

        # Assert
        mock_kube_client_apps_v1.assert_called_once()
        mock_apps_v1.list_namespaced_deployment.assert_called_once_with('default')
        self.assertEqual(result, 'mock_deployments')

if __name__ == '__main__':
    unittest.main()
